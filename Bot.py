import telebot
from pymongo import MongoClient
bot = telebot.TeleBot("5061166024:AAHIko-D20d0Mu0inh6aj6QzxuidhagyLNM")

class DataBase:
	def __init__(p):
		""" –§—É–Ω–∫—Ü–∏—è Init —ç—Ç–æ –º–µ—Ç–æ–¥ –∫–ª–∞—Å—Å–∞, –Ω—É–∂–µ–Ω –¥–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ–±—ä–µ–∫—Ç–∞ db –≤—ã—Ä–∞–∂–µ–Ω–∏–µ–º
		db = DataBase() –∑–∞–¥–∞–≤–∞–ª–∏—Å—å —Å–≤–æ–π—Å—Ç–≤–∞ –∏ –Ω–∞—á–∞–ª—å–Ω—ã–µ –∑–Ω–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞.
		–¢–æ –µ—Å—Ç—å —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö. –ü–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫ –∫–æ–ª–ª–µ–∫—Ü–∏–∏, —Å—á–∏—Ç–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ –≤–∏–∫—Ç–æ—Ä–∏–Ω–µ.
		–í–Ω—É—Ç—Ä–∏ –∫–ª–∞—Å—Å–∞ –º—ã –æ–±—Ä–∞—â–∞–µ–º—Å—è –∫ –æ–±—ä–µ–∫—Ç—É —á–µ—Ä–µ–∑ p.

		:param p: –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –æ–±—ä–µ–∫—Ç, –∫–∞–∫ –∏ –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–∞–Ω–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞.
		"""
		cluster = MongoClient("mongodb+srv://annv:polol2461@cluster0.082c6.mongodb.net/test")
		p.db = cluster["quiz"] #–∫–æ–ª–ª–µ–∫—Ü–∏—è
		p.students = p.db["test"]
		p.questions = p.db["que"]
		p.NumberOfQuestions = len(list(p.questions.find({}))) #–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤
	def GetStudent(p, userID):
		"""–§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –∏–Ω–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ chat_id.
		–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, —Ç–æ —Å–æ–∑–¥–∞–µ—Ç—Å—è –Ω–æ–≤—ã–π.

		:param p: –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –æ–±—ä–µ–∫—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
		:param userID: –ø—Ä–∏–Ω–∏–º–∞–µ—Ç chat_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
		:return: –¥–∞–Ω–Ω—ã–µ –æ —Å—Ç—É–¥–µ–Ω—Ç–µ
		"""
		student = p.students.find_one({"chat_id": userID})
		if student is not None:
			return student
		student = {
			"chat_id": userID,
			"is_passing": False,
			"is_passed": False,
			"question_index": None,
			"answers": []
		}
		p.students .insert_one(student)
		return student
	def setStudent(p, userID, update):
		"""–§—É–Ω–∫—Ü–∏—è –º–µ–Ω—è–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ chat_id.

		:param p:–ø—Ä–∏–Ω–∏–º–∞–µ—Ç –æ–±—ä–µ–∫—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
		:param userID: –ø—Ä–∏–Ω–∏–º–∞–µ—Ç chat_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
		:param update: –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
		"""
		p.students .update_one({"chat_id": userID}, {"$set": update})
	def GiveAQuestion(p, index):
		"""
		:param p: –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –æ–±—ä–µ–∫—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
		:param index: –∏–Ω–¥–µ–∫—Å –≤–æ–ø—Ä–æ—Å–∞ (–µ–≥–æ –Ω–æ–º–µ—Ä)
		:return: –≤–æ–∑–≤—Ä–∞—â–µ—Ç –≤–æ–ø—Ä–æ—Å –ø–æ –∏–Ω–¥–µ–∫—Å—É —Å–∞–º–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
		"""
		return p.questions.find_one({"id": index})
db = DataBase()
@bot.message_handler(commands=["start"])
def start(message):
	"""
	–§—É–Ω–∫—Ü–∏—è –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø–æ –∫–æ–º–∞–Ω–¥–µ 'start'. –ù–∞—á–∏–Ω–∞–µ—Ç—Å—è —Ä–∞–±–æ—Ç–∞ –±–æ—Ç–∞.
	–í —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è –ø—Ä–æ—Ö–æ–¥–∏–ª –ª–∏ —Ä–∞–Ω—å—à–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±–æ—Ç–∞ –≤–∏–∫—Ç–æ—Ä–∏–Ω—É.
	–ü—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏ –Ω–µ–ø–æ–ª—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–Ω–æ –µ–≥–æ –æ—Ç–ø—Ä–∞–≤–∫–∞.

	:param message: –Ω–æ–≤–æ–µ –≤—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ª—é–±–æ–≥–æ —Ä–æ–¥–∞
	"""
	student = db.GetStudent(message.chat.id)
	if student["is_passed"]:
		bot.send_message(message.from_user.id, "–í—Ç–æ—Ä–∞—è –ø–æ–ø—ã—Ç–∫–∞ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞.")
		return
	if student["is_passing"]:
		return
	db.setStudent(message.chat.id, {"question_index": 0, "is_passing": True})
	student = db.GetStudent(message.chat.id)
	Unloading = Receiving_A_Message_With_A_Question(student)
	if Unloading is not None:
		bot.send_message(message.from_user.id, Unloading["question"], reply_markup=Unloading["keyboard"])
@bot.callback_query_handler(func=lambda query: query.data.startswith("?ans"))
def answered(query):
	""" –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä –Ω–∞–∂–∞—Ç–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É. –ü—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç
	–¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –æ–±—â–∏–π —Å–ø–∏—Å–æ–∫ –æ—Ç–≤–µ—Ç–æ–≤.

	:param query: –æ–±—ä–µ–∫—Ç –∑–∞–ø—Ä–æ—Å–∞  –æ—Ç–≤–µ—Ç–∞
	"""
	student= db.GetStudent(query.message.chat.id)
	if student["is_passed"] or not student["is_passing"]:
		return
	student["answers"].append(int(query.data.split("&")[1]))
	db.setStudent(query.message.chat.id, {"answers": student["answers"]})

	Unloading = Get_A_Reply_Message(student)
	if Unloading is not None:
		bot.edit_message_text(Unloading["question"], query.message.chat.id, query.message.id,
						 reply_markup=Unloading["keyboard"])
@bot.callback_query_handler(func=lambda query: query.data == "?next")
def next(query):
	"""
	–§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É.
	:param query:

	"""
	student = db.GetStudent(query.message.chat.id)
	if student["is_passed"] or not student["is_passing"]:
		return
	student["question_index"] += 1
	db.setStudent(query.message.chat.id, {"question_index": student["question_index"]})
	Unloading = Receiving_A_Message_With_A_Question(student)
	if Unloading is not None:
		bot.edit_message_text(Unloading["question"], query.message.chat.id, query.message.id,
						 reply_markup=Unloading["keyboard"])

def Get_A_Reply_Message(student):
	"""
	–§—É–Ω–∫—Ü–∏—è –æ—Ç–≤–µ—á–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é. –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –µ–≥–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∏ –ª–æ–∂–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —ç—Ç–æ.
	:param student:
	:return: –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
	"""
	question = db.GiveAQuestion(student["question_index"])
	text = f"–í–æ–ø—Ä–æ—Å ‚Ññ{student['question_index'] + 1}\n\n{question['question']}\n"
	for answer_index, answer in enumerate(question["answers"]):
		text += f"{chr(answer_index + 97)}) {answer}"
		if answer_index == question["right"]:
			text += " üëç- –í–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç"
		elif answer_index == student["answers"][-1]:
			text += "- –í–∞—à –æ—Ç–≤–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π"
		text += "\n"
	keyboard = telebot.types.InlineKeyboardMarkup()
	keyboard.row(telebot.types.InlineKeyboardButton("–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥", callback_data="?next"))
	return {
		"question": text,
		"keyboard": keyboard
	}
def Receiving_A_Message_With_A_Question(student):
	"""–§—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É  –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è —Ç–µ—Ö, –∫—Ç–æ –Ω–µ –ø—Ä–æ—à–µ–ª –≤–∏–∫—Ç–æ—Ä–∏–Ω—É.
	–ü—Ä–æ–±–µ–≥–∞–µ–º –ø–æ –≤—Å–µ–º –æ—Ç–≤–µ—Ç–∞–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç—ã –≤ –∫–Ω–æ–ø–∫–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è —Å–ª–æ–≤–∞—Ä—å —Å —Ç–µ–∫—Å—Ç–æ–º –≤–æ–ø—Ä–æ—Å–∞ –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π.

	:param student:- –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
	"""
	if student["question_index"] == db.NumberOfQuestions:
		counter = 0
		for question_index, question in enumerate(db.questions.find({})):
			if question["right"] == student["answers"][question_index]:
				counter += 1
		res=100 * counter
		result = round(res / db.NumberOfQuestions)
		if (result < 20):
			estimation = "- –Ω–µ—É–¥–≤–æ–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ"
		elif (result >= 20) and (result < 45):
			estimation = " - —É–¥–≤–æ–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ"
		elif (result >= 45) and (result < 80):
			estimation = "- —Ö–æ—Ä–æ—à–æ"
		elif (result >= 80):
			estimation = "- –æ—Ç–ª–∏—á–Ω–æ"
		text = f"–í–∞—à–∞ –æ—Ü–µ–Ω–∫–∞ {estimation}. –ü—Ä–æ—Ü–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–æ–π –≤–µ—Ä–Ω–æ —Ä–∞–±–æ—Ç—ã {result}%."
		db.setStudent(student["chat_id"], {"is_passed": True, "is_passing": False})
		return {
			"question": text, "keyboard": None
		}
	question = db.GiveAQuestion(student["question_index"])
	if question is None:
		return
	keyboard = telebot.types.InlineKeyboardMarkup()
	for answer_index, answer in enumerate(question["answers"]):
		keyboard.row(telebot.types.InlineKeyboardButton(f"{chr(answer_index + 97)}) {answer}",
														callback_data=f"?ans&{answer_index}"))
	text = f"–í–æ–ø—Ä–æ—Å ‚Ññ{student['question_index'] + 1}\n\n{question['question']}"
	return {
		"question": text,
		"keyboard": keyboard
	}
bot.polling()
